#!/usr/bin/env python3
"""
Script de instala√ß√£o e configura√ß√£o inicial do SaaS Sistema de Gest√£o
"""

import os
import sys
import subprocess
import platform

def print_header():
    """Imprime o cabe√ßalho do instalador"""
    print("=" * 60)
    print("üöÄ SaaS SISTEMA DE GEST√ÉO - INSTALADOR")
    print("=" * 60)
    print("Sistema completo para controle de estoque e vendas")
    print("Desenvolvido com Python Flask, HTML, CSS e JavaScript")
    print("=" * 60)

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    print("\nüìã Verificando vers√£o do Python...")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio!")
        print(f"   Vers√£o atual: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True

def create_virtual_environment():
    """Cria ambiente virtual se n√£o existir"""
    print("\nüîß Configurando ambiente virtual...")
    
    venv_path = "venv"
    if os.path.exists(venv_path):
        print("‚úÖ Ambiente virtual j√° existe")
        return True
    
    try:
        subprocess.run([sys.executable, "-m", "venv", venv_path], check=True)
        print("‚úÖ Ambiente virtual criado com sucesso")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao criar ambiente virtual")
        return False

def get_activation_command():
    """Retorna comando para ativar ambiente virtual baseado no OS"""
    if platform.system() == "Windows":
        return "venv\\Scripts\\activate"
    else:
        return "source venv/bin/activate"

def install_dependencies():
    """Instala depend√™ncias do projeto"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    # Determina o comando pip baseado no OS
    if platform.system() == "Windows":
        pip_command = os.path.join("venv", "Scripts", "pip")
    else:
        pip_command = os.path.join("venv", "bin", "pip")
    
    try:
        subprocess.run([pip_command, "install", "-r", "requirements.txt"], check=True)
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    
    directories = [
        "instance",
        "static/uploads",
        "static/images",
        "logs"
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
    
    print("‚úÖ Diret√≥rios criados")

def create_env_file():
    """Cria arquivo .env se n√£o existir"""
    print("\n‚öôÔ∏è Configurando vari√°veis de ambiente...")
    
    if os.path.exists(".env"):
        print("‚úÖ Arquivo .env j√° existe")
        return
    
    env_content = """# Configura√ß√µes do Sistema SaaS
SECRET_KEY=sua-chave-secreta-super-segura-aqui
SQLALCHEMY_DATABASE_URI=sqlite:///saas_sistema.db
FLASK_ENV=development
FLASK_DEBUG=True

# Configura√ß√µes de Email (opcional)
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=True
MAIL_USERNAME=seu-email@gmail.com
MAIL_PASSWORD=sua-senha-de-app

# Configura√ß√µes de Upload (opcional)
UPLOAD_FOLDER=static/uploads
MAX_CONTENT_LENGTH=16777216  # 16MB
"""
    
    with open(".env", "w", encoding="utf-8") as f:
        f.write(env_content)
    
    print("‚úÖ Arquivo .env criado")

def print_instructions():
    """Imprime instru√ß√µes de uso"""
    activation_cmd = get_activation_command()
    
    print("\n" + "=" * 60)
    print("üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("=" * 60)
    print("\nüìã Pr√≥ximos passos:")
    print(f"1. Ative o ambiente virtual: {activation_cmd}")
    print("2. Execute o sistema: python run.py")
    print("3. Acesse: http://localhost:5000")
    print("\nüîê Para primeiro acesso:")
    print("- V√° para: http://localhost:5000/register")
    print("- Crie sua conta de usu√°rio")
    print("- Fa√ßa login e comece a usar!")
    print("\nüìö Documenta√ß√£o completa no README.md")
    print("=" * 60)

def main():
    """Fun√ß√£o principal do instalador"""
    print_header()
    
    # Verifica√ß√µes e instala√ß√£o
    if not check_python_version():
        return False
    
    if not create_virtual_environment():
        return False
    
    if not install_dependencies():
        return False
    
    create_directories()
    create_env_file()
    
    print_instructions()
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            print("\n‚ùå Instala√ß√£o falhou!")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Instala√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)

